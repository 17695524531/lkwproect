package com.szht.controller;

import com.alibaba.fastjson.JSON;
import com.mysql.cj.util.Base64Decoder;
import com.szht.po.User;
import com.szht.service.UserService;
import com.szht.utils.BaseEcnodeUtil;
import com.szht.utils.DataUtils;
import com.szht.utils.UUidUtils;
import com.szht.utils.YzmUtils;
import net.sf.json.JSONObject;
import org.apache.commons.collections.bag.SynchronizedSortedBag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import sun.misc.BASE64Decoder;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

@Controller
public class UserController {
    @Resource(name = "userservice")
    private UserService userService;
    @Autowired
    private UUidUtils uidUtils;
    @Autowired
    private DataUtils dataUtils;
    @Autowired
    private YzmUtils yzmUtils;

    private static final String apiUrl = "https://sms_developer.zhenzikj.com";
    private static final String appid = "105521";
    private static final String appSecret = "b15d4488-640c-41d3-ac89-288a8b046fe5";

    @RequestMapping(value = "/checkuserexite", method = RequestMethod.POST)
    public void checkuserexite(
            @RequestParam(value = "username") String username,
            @RequestParam(value = "password") String password,
            HttpServletRequest request,
            HttpServletResponse response
    ) throws Exception {
        PrintWriter writer = response.getWriter();
        User isexite = userService.checkuserexite(username.trim(), password.trim());
        String flag = "N";
        HashMap<String, Object> map = new HashMap<>();
        if (isexite == null) {
            flag = "N";
        } else {
            HttpSession session = request.getSession();
            String phone = userService.getUserphoneBynp(username, password);
            User user1 = new User(username, password);
            user1.setUserphone(phone);
            session.setAttribute("user", user1);
            flag = "Y";
        }
        map.put("msg", flag);
        map.put("user", isexite);
        JSONObject jsonObject = JSONObject.fromObject(map);
        String string = jsonObject.toString();
        writer.println(string);
        writer.flush();
        writer.close();
    }

    @RequestMapping("/getusernamepasswordByphone")
    public String getusernamepasswordByphone(
            @RequestParam(value = "phone") String phone,
            HttpServletRequest request,
            HttpServletResponse response
    ) throws IOException {
        response.setContentType("text/html;charset=utf-8");
        User user = userService.getusernamepasswordByphone(phone);
        HashMap<String, Object> hashMap = new HashMap<>();
        if (user == null) {
            hashMap.put("msg", "N");
        } else {
            hashMap.put("msg", "Y");
            hashMap.put("user", user);
        }
        JSONObject object = JSONObject.fromObject(hashMap);
        PrintWriter writer = response.getWriter();
        writer.println(object.toString());
        writer.flush();
        writer.close();
        return null;
    }

    @RequestMapping(value = "/getjmdata", method = RequestMethod.POST)
    public String getjmdata(
            @RequestParam("jmusername") String jmusername,
            @RequestParam("jmpassword") String jmpassword,
            HttpServletRequest request,
            HttpServletResponse response
    ) throws  Exception{
        String username = BaseEcnodeUtil.setEncrypted(jmusername);
        String password = BaseEcnodeUtil.setEncrypted(jmpassword);
        PrintWriter writer = response.getWriter();
        HashMap<String, Object> resultmap = new HashMap<>();
        resultmap.put("username",username);
        resultmap.put("password",password);
        writer.println(com.alibaba.fastjson.JSONObject.toJSONString(resultmap));
        writer.flush();
        writer.close();
        return null;
    }

    @RequestMapping(value = "/gomainpage", method = RequestMethod.GET)
    public String gomainpage(
            @RequestParam("username") String username,
            @RequestParam("password") String password,
            HttpServletRequest request,
            HttpServletResponse response
    ) {
        response.addHeader("Access-Control-Allow-Origin", "*");
        User user = userService.checkuserexite(username.trim(), password.trim());
        request.setAttribute("user", user);
        return "mainpage";
    }

    @RequestMapping(value = "/goreg", method = RequestMethod.GET)
    public String goreg() {
        return "Register";
    }

    @RequestMapping(value = "/findUser", method = RequestMethod.POST)
    public String findUser(
            @RequestParam("username") String username,
            @RequestParam("password") String password,
            @RequestParam("phone") String phone,
            @RequestParam("realname") String realname,
            HttpServletResponse response,
            HttpServletRequest request
    ) {
        User user = userService.findUser(phone);
        HashMap<String, Object> resultMap = new HashMap<>();
        if (user != null) {
            resultMap.put("msg", "Y");
        } else {
            resultMap.put("msg", "N");
        }
        JSONObject object = JSONObject.fromObject(resultMap);
        String str = object.toString();
        PrintWriter writer = null;
        try {
            writer = response.getWriter();
            writer.println(str);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                writer.flush();
                writer.close();
            }
        }
        return null;
    }

    @RequestMapping(value = "/regUser", method = RequestMethod.POST)
    public String regUser(
            @RequestParam("username") String username,
            @RequestParam("password") String password,
            @RequestParam("phone") String phone,
            @RequestParam("realname") String realname,
            HttpServletResponse response,
            HttpServletRequest request
    ) {
        String uuid = uidUtils.getUUid();
        int flag = userService.regUser(uuid, uuid, username, password, phone, realname);
        HashMap<String, Object> map = new HashMap<>();
        if (flag > 0) {
            map.put("regmsg", "Y");
        } else {
            map.put("regmsg", "N");
        }
        JSONObject object = JSONObject.fromObject(map);
        String s = object.toString();
        PrintWriter writer = null;
        try {
            writer = response.getWriter();
            writer.write(s);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                writer.flush();
                writer.close();
            }
        }
        return null;
    }

    @RequestMapping(value = "/goLoginPage", method = RequestMethod.GET)
    public String goLoginPage(
            HttpServletRequest request,
            HttpServletResponse response
    ) {
        response.addHeader("Access-Control-Allow-Origin", "*");
        return "Login";
    }

    @RequestMapping(value = "/goforget", method = RequestMethod.GET)
    public String goforget() {
        return "forgetpwd";
    }

    @RequestMapping(value = "/getUzm", method = RequestMethod.POST)
    public String getUzm(
            @RequestParam("phone") String phone,
            HttpServletRequest request,
            HttpServletResponse response
    ) throws Exception {
        Map resultMap = yzmUtils.getYzm(phone, apiUrl, appid, appSecret);
        JSONObject fromObject = JSONObject.fromObject(resultMap);
        PrintWriter writer = response.getWriter();
        writer.println(fromObject.toString());
        Logger logger = LoggerFactory.getLogger("jingchngjiaoyuLogger:");
        logger.info(JSON.toJSONString(resultMap));
        writer.flush();
        writer.close();
        return null;
    }

    @RequestMapping(value = "/updateUser", method = RequestMethod.POST)
    public String updateUser(
            @RequestParam("newpwd") String newpwd,
            @RequestParam("phone") String phone,
            HttpServletRequest request,
            HttpServletResponse response
    ) throws IOException {
        boolean updateflag = userService.updateUser(newpwd, phone);
        HashMap<String, Object> map = new HashMap<>();
        if (updateflag == true) {
            map.put("msg", "Y");
        } else if (updateflag == false) {
            map.put("msg", "N");
        }
        JSONObject object = JSONObject.fromObject(map);
        PrintWriter writer = response.getWriter();
        writer.println(object.toString());
        writer.flush();
        writer.close();
        return null;
    }

    @RequestMapping(value = "/forgetfindUser", method = RequestMethod.POST)
    public String forgetfindUser(
            @RequestParam(value = "phone") String phone,
            HttpServletRequest request,
            HttpServletResponse response
    ) {
        boolean flag = userService.forgetfindUser(phone);
        HashMap<String, Object> hashMap = new HashMap<>();
        PrintWriter writer = null;
        if (flag == true) {
            hashMap.put("msg", "Y");
        } else if (flag == false) {
            hashMap.put("msg", "N");
        }
        try {
            writer = response.getWriter();
            JSONObject object = JSONObject.fromObject(hashMap);
            writer.println(object.toString());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                writer.flush();
                writer.close();
            }
        }
        return null;
    }

    @RequestMapping(value = "/checkOldPwd", method = RequestMethod.POST)
    public String checkOldPwd(
            @RequestParam("phone") String phone,
            @RequestParam("oldpwd") String oldpwd,
            HttpServletRequest request,
            HttpServletResponse response
    ) throws Exception {
        HashMap<String, Object> map = new HashMap<>();
        boolean flag = userService.checkOldPwd(phone, oldpwd);
        if (flag == true) {
            map.put("msg", "Y");
        } else if (flag == false) {
            map.put("msg", "N");
        }
        PrintWriter writer = response.getWriter();
        JSONObject object = JSONObject.fromObject(map);
        writer.println(object.toString());
        writer.flush();
        writer.close();
        return null;
    }

    @RequestMapping(value = "/gomainpagebase", method = RequestMethod.GET)
    public String gomainpagebase(
            @RequestParam("username") String username,
            @RequestParam("password") String password,
            HttpServletRequest request,
            HttpServletResponse response
    ) throws Exception {
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] usernamebuffer = decoder.decodeBuffer(username);
        byte[] passwordbuff = decoder.decodeBuffer(password);
        String name = new String(usernamebuffer);
        String pwd = new String(passwordbuff);
        User user = userService.checkuserexite(name.trim(), pwd.trim());
        request.setAttribute("user", user);
        return "mainpage";
    }
}
